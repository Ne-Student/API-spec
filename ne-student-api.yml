openapi: 3.0.3
info:
  title: Ne Student
  version: 0.1.0
  description: Everything related with ne-student service
  contact:
    name: Yaroslav (API developer)
    email: q.link0.p@gmail.com
externalDocs:
  url: https://github.com/Malien/ne-student-api
  description: An API repo, containing both spec, and it's implementation
tags:
  - name: auth
    x-displayName: Authentication API
    description: Authentication APIs, covering needs for login, registration, password reset and token invalidation
  - name: permissions
    x-displayName: Permissions
    description: Manage access to different entities (lessons, teachers, tasks)
  - name: lesson
    x-displayName: Lesson
    description: Everyhting related to lesson retrieval and manipulation
  - name: teacher
    x-displayName: Teacher
    description: Everyhting related to teacher retrieval and manipulation
  - name: task
    x-displayName: Task
    description: Everyhting related to task retrieval and manipulation
  - name: retrieval
    x-displayName: Data fetching
    description: APIs that allow to fetch different enteties
  - name: manipulation
    x-displayName: Data manipulation
    description: APIs that allow changing and deleting data resources
x-tagGroups:
  - name: Genral
    tags:
      - auth
      - permissions
  - name: Entities
    tags:
      - lesson
      - teacher
      - task
  - name: Access types
    tags:
      - retrieval
      - manipulation
servers:
  - url: 'http://localhost:8800'
paths:

  /auth/login:
    post:
      tags: 
        - auth
      summary: Login user via login and password
      description: Generate access token from login credentials
      operationId: auth-login

      requestBody:
        content:
          application/json:
            schema:
              $ref: 'out/requests.json#/definitions/Login'
            example:
              $ref: 'out/examples.json#/login'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'out/responses.json#/definitions/Login'
              example:
                $ref: 'out/examples.json#/loginSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: 'out/errors.json#/definitions/SingleInvalidCredentials'
              example:
                $ref: 'out/examples.json#/invalidCredentials'
        '500':
          $ref: '#/components/responses/internalError'

  /auth/register:
    post:
      tags: 
        - auth
      summary: Register a new user
      description: Create a new user
      operationId: auth-register
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'out/requests.json#/definitions/Register'
            examples:
              Fully specified registration:
                value:
                  $ref: 'out/examples.json#/register'
              Without last name:
                value:
                  $ref: 'out/examples.json#/registerWithoutName'

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: 'out/responses.json#/definitions/Register'
              examples:
                Success:
                  value:
                    $ref: 'out/examples.json#/registerSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: 'out/errors.json#/definitions/Register401'
              examples:
                User does not exist:
                  value:
                    $ref: 'out/examples.json#/registerFailure'
                Login contains invalid sequence of characters:
                  value:
                    $ref: 'out/examples.json#/invalidLogin'
                Password contains invalid sequence of characters:
                  value:
                    $ref: 'out/examples.json#/invalidPassword'
        '500':
          $ref: '#/components/responses/internalError'

  /lesson:
    parameters:
      - name: Authorization
        in: header
        required: true
        schema: { type: string, format: bearer }

    put:
      tags:
        - lesson
        - manipulation
      summary: Create new Lesson
      description: |
        Create new Lesson. User will be automatically assigned read-write permissions
        to the newly created lesson.
      operationId: put-lesson
      security:
        - bearerAuth: [ ]
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'out/requests.json#/definitions/AddLesson'
            example:
              $ref: 'out/examples.json#/addLesson'
      
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: 'out/responses.json#/definitions/NewLesson'
              example:
                $ref: 'out/examples.json#/getLesson'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

  /lesson/{id}:
    parameters:
      - name: id
        required: true
        in: path
        example: a7262da1-33ed-448c-8b7d-97263d0974f7
        schema:
          $ref: 'out/common.json#/definitions/LessonID'
      - name: Authorization
        in: header
        required: true
        schema: { type: string, format: bearer }

    patch:
      tags:
        - lesson
        - manipulation
      summary: Modify existing Lesson
      description: |
        Modifies already present lesson, found by id, by setting appropriate fields to the new values.
        If field is not present in request body, that field in entity is left unchanged.
        If field contains appropriate value, that field in entity is set to the new value.
        If field is set to null, that field will be deleted from the entity.
      operationId: patch-lesson
      security:
        - bearerAuth: [ ]
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'out/requests.json#/definitions/UpdateLesson'
            example:
              $ref: 'out/examples.json#/addLesson'
      
      responses:
        '204':
          description: Updated (No content)
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/noLessonWriteAccess'
        '500':
          $ref: '#/components/responses/internalError'
    
    get:
      tags:
        - retrieval
        - lesson
      summary: Fetch a single lesson
      description: Retrieve a lesson by its ID
      operationId: get-lesson
      security:
        - bearerAuth: [ ]

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'out/responses.json#/definitions/GetLesson'
              example:
                $ref: 'out/examples.json#/getLesson'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/lessonNotFound'
        '403':
          $ref: '#/components/responses/noLessonReadAccess'
        '500':
          $ref: '#/components/responses/internalError'
    
    delete:
      tags:
        - manipulation
        - lesson
      summary: Delete a lesson
      description: Delete a single lesson by its ID
      operationId: delete-lesson
      security:
        - bearerAuth: [ ]

      responses:
        '204':
          description: Deleted (No content)
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/noLessonWriteAccess'
        '404':
          $ref: '#/components/responses/lessonNotFound'
        '500':
          $ref: '#/components/responses/internalError'
      
  /lessons:
    parameters:
      - name: date
        in: query
        schema: { type: string }
        description: Date at which lessons are scheduled. Formatted as DD/MM/YYYY
        example: 01/16/2001
      - name: Authorization
        in: header
        required: true
        schema: { type: string, format: bearer }
    
    get:
      tags:
        - retrieval
        - lesson
      summary: Fetch list of lessons
      description: |
        Retrieve list of the lessons, filtered by the query parameters.
        If user doesn't have permissions to read certain lessons, they won't be returned by the API
      operationId: get-lessons
      security:
        - bearerAuth: [ ]

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'out/responses.json#/definitions/GetLessonList'
              examples:
                Populated list:
                  value:
                    $ref: 'out/examples.json#/lessonList'
                No lessons found:
                  value:
                    $ref: 'out/examples.json#/emptyList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

  /teacher:
    parameters:
      - name: Authorization 
        in: header
        required: true
        schema: { type: string, format: bearer }

    put:
      tags:
        - teacher
        - manipulation
      summary: Create a new teacher
      description: Create a new teacher with first name and optional last name
      operationId: put-teacher
      security:
        - bearerAuth: [ ]

      requestBody:
        content:
          application/json:
            schema: 
              $ref: 'out/requests.json#/definitions/AddTeacher'
            example:
              $ref: 'out/examples.json#/addTeacher'

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: 'out/responses.json#/definitions/GetTeacher'
              example:
                $ref: 'out/examples.json#/getTeacher'

        '401':
          $ref: '#/components/responses/unauthorized'

        '500':
          $ref: '#/components/responses/internalError'

  /teacher/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: 'out/common.json#/definitions/TeacherID'
        example: 6b7fda92-581f-4236-8127-cc39e58185a1
      - name: Authorization 
        in: header
        required: true
        schema: { type: string, format: bearer }

    get:
      tags:
        - teacher
        - retrieval
      summary: Fetch a single teacher
      description: Retrieve a single teacher object by its id
      operationId: get-teacher
      security:
        - bearerAuth: [ ]

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: 
                $ref: 'out/responses.json#/definitions/GetTeacher'
              example:
                $ref: 'out/examples.json#/getTeacher'
        '404':
          $ref: '#/components/responses/teacherNotFound'
        '403':
          $ref: '#/components/responses/noTeacherReadAccess'
        '401':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token is returned by the `/login` and `/register` API calls.
        This token is expected to be present in the `Authorization` http header in form of `Bearer <token>`.

        So if the token returned by the `/login` call is `someLongTokenStringWithNumbersAndWierdSymbols`.
        The `Authorization` header should be `Bearer someLongTokenStringWithNumbersAndWierdSymbols`.

        Authentication tokes are JWTs which are cryptographically secured and contain a bit of information to identify user at the back-end.

  responses:

    invalidCredentials:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleInvalidCredentials'
          examples:
            Invalid Credentials:
              value:
                $ref: 'out/examples.json#/loginFailure'

    internalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleInternalError'
          examples:
            Internal Server Error:
              value:
                $ref: 'out/examples.json#/internalError'

    unauthorized:
      description: Access token is missing, invalid or expired
      content:
        application/json:
          schema: 
            $ref: 'out/errors.json#/definitions/SingleUnauthorized'
          examples:
            Token is missing:
              value:
                $ref: 'out/examples.json#/noTokenPresent'
            Invalid token:
              value:
                $ref: 'out/examples.json#/invalidToken'
            Token expired:
              value:
                $ref: 'out/examples.json#/tokenExpired'
            Token revoked:
              value:
                $ref: 'out/examples.json#/tokenRevoked'
    
    # Lesson specific components
    lessonNotFound:
      description: Lesson not found
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleLessonDoesNotExist'
          example:
            $ref: 'out/examples.json#/lessonNotFound'

    noLessonReadAccess:
      description: No read access
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleLessonNoReadAccess'
          example:
            $ref: 'out/examples.json#/noLessonReadAccess'

    noLessonWriteAccess:
      description: No read/write access
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/NoWriteAccess403'
          examples:
            No write access:
              value:
                $ref: 'out/examples.json#/noLessonWriteAccess'
            No read access:
              value:
                $ref: 'out/examples.json#/noLessonReadAccess'

    # Teacher specific components
    teacherNotFound:
      description: Teacher not found
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleTeacherDoesNotExist'
          example:
            $ref: 'out/examples.json#/teacherNotFound'

    noTeacherReadAccess:
      description: No read access
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/SingleTeacherNoReadAccess'
          example:
            $ref: 'out/examples.json#/noTeacherReadAccess'

    noTeacherWriteAccess:
      description: No read/write access
      content:
        application/json:
          schema:
            $ref: 'out/errors.json#/definitions/NoWriteAccess403'
          examples:
            No write access:
              value:
                $ref: 'out/examples.json#/noTeacherWriteAccess'
            No read access:
              value:
                $ref: 'out/examples.json#/noTeacherReadAccess'
